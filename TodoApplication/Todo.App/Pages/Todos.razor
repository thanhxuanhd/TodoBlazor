@page "/"
@page "/Todos"
@page "/Todos/{CategoryId:guid?}"


<div class="flex mb-2">
    <Action OnKeywordChanged="HandleKeyWordChange" OnAddClicked="HandleAddClick" OnCompletedChanged="HandleCompleteChange" />
</div>

@if (TodoList == null || TodoList?.Items == null)
{
    <div class="bg-white rounded-md p-2">Loading...</div>
}
else
{
    if (TodoList.Items.Count == 0)
    {
        <div class="bg-white rounded-md p-2 mb-2 h-28 w-full text-center">
            <div class="mt-10">
                No records.
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-4 oi-grap gap-2">
            @foreach (var todo in TodoList.Items)
            {
                <div class="bg-white rounded-md p-2 mb-1 h-32 shadow-sm">
                    <div class="h-2/3">
                        <span id="@todo.TodoId">
                            @todo.Title
                        </span>
                    </div>
                    <div class="rounded-md p-2 mb-2 h-1/3 text-right">
                        <button class="text-blue-500 focus:outline-none" title="Edit" @onclick="@((e)=> HandleEditClick(e, todo.TodoId))">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                            </svg>
                        </button>

                        <button class="text-red-500 focus:outline-none" title="Delete">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="mt-3">
            <Pager PageIndex="@TodoList.PageIndex" TotalPages=@TodoList.TotalPages OnClick="PageIndexChanged"
                   HasNextPage="@TodoList.HasNextPage" HasPreviousPage="@TodoList.HasPreviousPage" TotalRecords="@TodoList.TotalRecords" PageSize="@PageSize">
            </Pager>
        </div>
    }
}

<AddEditTodo Model="@TodoModel" OnCancelClicked="@HandleCancelClick" OnSavelClicked="@HandleSaveCLick" IsEdit="@IsEdit" />

@code {
    [Parameter]
    public Guid? CategoryId { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 20;

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Parameter]
    public string Keyword { get; set; }

    [Parameter]
    public bool IsComplete { get; set; }

    public bool IsEdit { get; set; }


    [Inject]
    public ITodoDataService TodoDataService
    {
        get; set;
    }

    public PaginatedTodoListViewModel TodoList { get; set; }

    public TodoViewModel TodoModel { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetTodos();
    }

    protected async Task GetTodos()
    {
        TodoList = await TodoDataService.GetTodos(PageSize, PageIndex, Keyword, IsComplete, CategoryId);
        StateHasChanged();
    }

    public async void PageIndexChanged(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > TodoList.TotalPages)
        {
            return;
        }
        PageIndex = newPageNumber;
        await GetTodos();
    }

    public async Task HandleKeyWordChange(string keyword)
    {
        this.Keyword = keyword;
        await GetTodos();
    }

    public async Task HandleCompleteChange(bool complete)
    {
        this.IsComplete = complete;
        await GetTodos();
    }

    public void HandleAddClick()
    {
        this.IsEdit = false;
        this.TodoModel = new TodoViewModel();
    }

    public void HandleSaveCLick()
    {
        this.TodoModel = null;
    }

    public void HandleCancelClick()
    {
        this.TodoModel = null;
    }

    public async Task HandleEditClick(MouseEventArgs eventArgs, Guid todoId)
    {
        IsEdit = true;
        TodoModel = await TodoDataService.GetTodo(todoId);
    }
}
