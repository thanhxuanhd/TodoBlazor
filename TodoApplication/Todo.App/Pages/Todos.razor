@page "/"
@page "/Todos"
@page "/Todos/{CategoryId:guid?}"


<div class="flex mb-2">
    <Action OnKeywordChanged="HandleKeyWordChange" OnAddClicked="HandleAddClick" OnCompletedChanged="HandleCompleteChange" />
</div>

@if (TodoList == null || TodoList?.Items == null)
{
    <div class="bg-white rounded-md p-2">Loading...</div>
}
else
{
    if (TodoList.Items.Count == 0)
    {
        <div class="bg-white rounded-md p-2 mb-2 h-28 w-full text-center">
            <div class="mt-10">
                No records.
            </div>
        </div>
    }
    else
    {
        <div class="grid grid-cols-4 oi-grap gap-2">
            @foreach (var todo in TodoList.Items)
            {
                <TodoItem Model="todo" OnEditClicked="HandleEditTodo" OnDeleteClicked="HandleDeleteTodo"></TodoItem>
            }
        </div>

        <div class="mt-3">
            <Pager PageIndex="@TodoList.PageIndex" TotalPages=@TodoList.TotalPages OnClick="PageIndexChanged"
                   HasNextPage="@TodoList.HasNextPage" HasPreviousPage="@TodoList.HasPreviousPage" TotalRecords="@TodoList.TotalRecords" PageSize="@PageSize">
            </Pager>
        </div>
    }
}

@if (TodoModel != null)
{
    <AddEditTodo Model="@TodoModel" OnCancelClicked="@HandleCancelClick" OnSavelClicked="@HandleSaveCLick" IsEdit="@IsEdit" Categories="@Categories" />
}

@if (IsDelete)
{
    <DeletePopup Title="@Title" OnYesClicked="HandleDeleteYes" OnNoClicked="HandleDeleteNo"></DeletePopup>
}



@code {
    [Parameter]
    public Guid? CategoryId { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 20;

    [Parameter]
    public int PageIndex { get; set; } = 1;

    [Parameter]
    public string Keyword { get; set; }

    [Parameter]
    public bool IsComplete { get; set; }

    public bool IsEdit { get; set; }

    public bool IsDelete { get; set; }

    public string Title { get; set; }

    public Guid TodoId { get; set; }

    [Inject]
    public ITodoDataService TodoDataService { get; set; }

    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    public PaginatedTodoListViewModel TodoList { get; set; }

    public TodoViewModel TodoModel { get; set; }

    public List<CategoryViewModel> Categories { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetTodos();
    }

    protected async Task GetTodos()
    {
        TodoList = await TodoDataService.GetTodos(PageSize, PageIndex, Keyword, IsComplete, CategoryId);
    }

    public async void PageIndexChanged(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > TodoList.TotalPages)
        {
            return;
        }
        PageIndex = newPageNumber;
        await GetTodos();
        StateHasChanged();
    }

    public async Task HandleKeyWordChange(string keyword)
    {
        this.Keyword = keyword;
        await GetTodos();
    }

    public async Task HandleCompleteChange(bool complete)
    {
        this.IsComplete = complete;
        await GetTodos();
    }

    public async Task HandleAddClick()
    {
        this.IsEdit = false;
        await GetCategories();
        this.TodoModel = new TodoViewModel();
        StateHasChanged();

    }

    public void HandleSaveCLick()
    {
        this.TodoModel = null;
    }

    public void HandleCancelClick()
    {
        this.TodoModel = null;
    }

    public async Task HandleEditTodo(Guid todoId)
    {
        IsEdit = true;
        await GetCategories();
        TodoModel = await TodoDataService.GetTodo(todoId);
    }


    public async Task GetCategories()
    {
        Categories = await CategoryDataService.GetAllCategories();
    }

    public void HandleDeleteTodo(TodoViewModel todo)
    {
        Title = todo.Title;
        TodoId = todo.TodoId;
        IsDelete = true;
    }

    public void HandleDeleteYes()
    {

    }

    public void HandleDeleteNo()
    {
        IsDelete = false;
        Title = "";
        TodoId = Guid.Empty;
    }
}
